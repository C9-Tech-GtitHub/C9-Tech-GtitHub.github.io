<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Category Reviewer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: system-ui, -apple-system, sans-serif;
            background-color: #f9fafb;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1.5rem;
        }

        .header {
            background: white;
            border-bottom: 1px solid #e5e7eb;
            position: sticky;
            top: 0;
            z-index: 10;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .title {
            font-size: 2rem;
            font-weight: bold;
            background: linear-gradient(to right, #2563eb, #7c3aed);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .subtitle {
            color: #6b7280;
            font-weight: 500;
            margin-top: 0.25rem;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.5rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(to right, #2563eb, #1d4ed8);
            color: white;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .btn-primary:hover {
            background: linear-gradient(to right, #1d4ed8, #1e40af);
        }

        .btn-secondary {
            background: white;
            color: #374151;
            border: 1px solid #d1d5db;
        }

        .btn-secondary:hover {
            background: #f9fafb;
        }

        .btn-secondary:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .upload-area {
            background: white;
            border: 2px dashed #d1d5db;
            border-radius: 0.5rem;
            padding: 3rem;
            text-align: center;
            margin: 2rem 0;
        }

        .upload-icon {
            width: 3rem;
            height: 3rem;
            color: #9ca3af;
            margin: 0 auto 1rem;
        }

        .card {
            background: white;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border: 2px solid #e5e7eb;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            transition: all 0.3s;
        }

        .card.approved {
            background: #f0fdf4;
            border-color: #bbf7d0;
        }

        .card.denied {
            background: #fef2f2;
            border-color: #fecaca;
        }

        .card.changed {
            background: #f0f9ff;
            border-color: #bae6fd;
        }

        .product-grid {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .image-container {
            aspect-ratio: 1;
            border-radius: 0.75rem;
            background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 1.5rem;
            text-align: center;
            position: relative;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .product-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 0.5rem;
        }

        .image-placeholder {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
        }

        .image-icon {
            width: 4rem;
            height: 4rem;
            background: #dbeafe;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
        }

        .product-details h1 {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.75rem;
            color: #111827;
        }

        .product-details p {
            color: #374151;
            line-height: 1.6;
            margin-bottom: 1.5rem;
        }

        .categories-section {
            background: white;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border: 1px solid #e5e7eb;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .categories-section h3 {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: #111827;
        }

        .category-option {
            background: #f9fafb;
            border: 2px solid #e5e7eb;
            border-radius: 0.5rem;
            padding: 1rem;
            margin-bottom: 0.75rem;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .category-option:hover {
            background: #f3f4f6;
            border-color: #9ca3af;
        }

        .category-option.selected {
            background: #dbeafe;
            border-color: #3b82f6;
            color: #1d4ed8;
        }

        .category-option.current {
            background: #fef3c7;
            border-color: #fbbf24;
            color: #92400e;
        }

        .category-text {
            font-weight: 500;
        }

        .category-meta {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
        }

        .confidence-badge {
            background: #e0e7ff;
            color: #3730a3;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .confidence-badge.high-conf {
            background: #dcfce7;
            color: #166534;
        }

        .confidence-badge.med-conf {
            background: #fef3c7;
            color: #92400e;
        }

        .confidence-badge.low-conf {
            background: #fef2f2;
            color: #991b1b;
        }

        .source-badge {
            background: #f3e8ff;
            color: #7c3aed;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .agreement-badge {
            background: #dcfce7;
            color: #166534;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .disagreement-badge {
            background: #fef2f2;
            color: #991b1b;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .decisions-section {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            border: 1px solid #e5e7eb;
        }

        .btn-approve {
            background: #dcfce7;
            color: #166534;
            border: 2px solid #bbf7d0;
            flex: 1;
            padding: 1rem 1.5rem;
            border-radius: 0.75rem;
            font-size: 1rem;
            font-weight: bold;
        }

        .btn-approve:hover {
            background: #bbf7d0;
            border-color: #86efac;
        }

        .btn-approve.active {
            background: linear-gradient(to right, #22c55e, #16a34a);
            color: white;
            transform: scale(1.05);
            box-shadow: 0 10px 15px rgba(0,0,0,0.1);
        }

        .btn-deny {
            background: #fef2f2;
            color: #991b1b;
            border: 2px solid #fecaca;
            flex: 1;
            padding: 1rem 1.5rem;
            border-radius: 0.75rem;
            font-size: 1rem;
            font-weight: bold;
        }

        .btn-deny:hover {
            background: #fecaca;
            border-color: #fca5a5;
        }

        .btn-deny.active {
            background: linear-gradient(to right, #ef4444, #dc2626);
            color: white;
            transform: scale(1.05);
            box-shadow: 0 10px 15px rgba(0,0,0,0.1);
        }

        .navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            border: 1px solid #e5e7eb;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }

        .nav-counter {
            text-align: center;
        }

        .nav-counter .number {
            font-size: 1.5rem;
            font-weight: bold;
            color: #111827;
        }

        .nav-counter .total {
            font-size: 0.75rem;
            color: #6b7280;
        }

        .progress-bar {
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            border: 1px solid #e5e7eb;
            padding: 1.5rem;
            margin: 1.5rem 0;
        }

        .progress-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .progress-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: #111827;
        }

        .progress-count {
            font-size: 0.875rem;
            font-weight: 500;
            color: #4b5563;
            background: #f3f4f6;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
        }

        .progress-track {
            width: 100%;
            background: #e5e7eb;
            border-radius: 9999px;
            height: 0.75rem;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(to right, #3b82f6, #7c3aed);
            border-radius: 9999px;
            transition: width 0.5s ease-out;
        }

        .progress-percent {
            text-align: right;
            margin-top: 0.5rem;
            font-size: 0.75rem;
            color: #6b7280;
        }

        .summary {
            background: linear-gradient(to right, #f9fafb, #f3f4f6);
            border-radius: 0.75rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            border: 1px solid #e5e7eb;
            padding: 1.5rem;
            margin: 1.5rem 0;
        }

        .summary h3 {
            font-size: 1.25rem;
            font-weight: bold;
            color: #111827;
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .summary-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
        }

        .summary-item {
            background: white;
            border-radius: 0.5rem;
            padding: 1rem;
            text-align: center;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .summary-number {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .summary-number.approved { color: #16a34a; }
        .summary-number.denied { color: #dc2626; }
        .summary-number.pending { color: #4b5563; }

        .summary-label {
            font-size: 0.875rem;
            font-weight: 500;
            color: #4b5563;
        }

        .summary-bar {
            width: 2rem;
            height: 0.25rem;
            border-radius: 9999px;
            margin: 0.5rem auto 0;
        }

        .summary-bar.approved { background: #16a34a; }
        .summary-bar.denied { background: #dc2626; }
        .summary-bar.pending { background: #9ca3af; }

        .loading {
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            width: 3rem;
            height: 3rem;
            border: 3px solid #e5e7eb;
            border-top: 3px solid #2563eb;
            border-radius: 50%;
            margin: 0 auto 1rem;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .hidden {
            display: none;
        }

        .icon {
            width: 1.25rem;
            height: 1.25rem;
            margin-right: 0.5rem;
            vertical-align: middle;
        }

        @media (max-width: 1024px) {
            .product-grid {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }
            
            .summary-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 1rem;
            }

            .decisions-section {
                flex-direction: column;
                gap: 0.75rem;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <div class="header-content">
            <div>
                <h1 class="title">Product Category Reviewer</h1>
                <p class="subtitle" id="product-counter">Review and approve product categories</p>
            </div>
            <div style="display: flex; gap: 1rem; align-items: center;">
                <button id="export-btn" class="btn btn-primary hidden">
                    <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Export (<span id="export-count">0</span>)
                </button>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- File Upload -->
        <div id="upload-section" class="upload-area">
            <svg class="upload-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
            </svg>
            <h3 style="font-size: 1.125rem; font-weight: 500; color: #111827; margin-bottom: 0.5rem;">Upload CSV File</h3>
            <p style="color: #6b7280; margin-bottom: 1rem;">Select your product category CSV file to begin reviewing</p>
            <input type="file" accept=".csv" id="csv-upload" style="display: none;">
            <label for="csv-upload" class="btn btn-primary" style="cursor: pointer;">Choose File</label>
        </div>

        <!-- Loading -->
        <div id="loading-section" class="loading hidden">
            <div class="spinner"></div>
            <p style="color: #4b5563;">Processing CSV...</p>
        </div>

        <!-- Product Review -->
        <div id="review-section" class="hidden">
            <!-- Progress Bar -->
            <div class="progress-bar">
                <div class="progress-header">
                    <span class="progress-title">Review Progress</span>
                    <span class="progress-count" id="progress-count">0 of 0 reviewed</span>
                </div>
                <div class="progress-track">
                    <div class="progress-fill" id="progress-fill" style="width: 0%"></div>
                </div>
                <div class="progress-percent" id="progress-percent">0% complete</div>
            </div>

            <!-- Product Card -->
            <div id="product-card" class="card">
                <div class="product-grid">
                    <!-- Product Image -->
                    <div>
                        <div class="image-container">
                            <img id="product-image" class="product-image hidden" alt="Product Image">
                            <div id="image-placeholder" class="image-placeholder">
                                <div class="image-icon">
                                    <svg style="width: 2rem; height: 2rem; color: #2563eb;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                </div>
                                <h3 id="image-status" style="font-weight: 600; color: #111827; margin-bottom: 0.5rem;">Loading Image...</h3>
                                <p id="image-description" style="font-size: 0.875rem; color: #4b5563;">Please wait while we load the product image</p>
                            </div>
                        </div>
                    </div>

                    <!-- Product Details -->
                    <div class="product-details">
                        <h1 id="product-title">Product Title</h1>
                        <p id="product-description">Product description...</p>
                    </div>
                </div>
            </div>

            <!-- Categories Section -->
            <div class="categories-section">
                <h3>Category Options</h3>
                <div id="categories-container">
                    <!-- Category options will be populated here -->
                </div>
            </div>

            <!-- Decision Buttons -->
            <div class="decisions-section">
                <button id="approve-btn" class="btn-approve">
                    <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <span id="approve-text">Approve Current Selection</span>
                </button>
                <button id="deny-btn" class="btn-deny">
                    <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    Reject All Options
                </button>
            </div>

            <!-- Summary -->
            <div id="summary-section" class="summary hidden">
                <h3>Review Summary</h3>
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="summary-number approved" id="approved-count">0</div>
                        <div class="summary-label">Approved</div>
                        <div class="summary-bar approved"></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-number denied" id="denied-count">0</div>
                        <div class="summary-label">Rejected</div>
                        <div class="summary-bar denied"></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-number pending" id="pending-count">0</div>
                        <div class="summary-label">Pending</div>
                        <div class="summary-bar pending"></div>
                    </div>
                </div>
            </div>

            <!-- Navigation -->
            <div class="navigation">
                <button id="prev-btn" class="btn btn-secondary">
                    <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                    Previous
                </button>
                
                <div class="nav-counter">
                    <div class="number" id="current-index">1</div>
                    <div class="total" id="total-count">of 0</div>
                </div>
                
                <div style="display: flex; gap: 0.5rem;">
                    <button id="skip-btn" class="btn btn-secondary">
                        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 9l3 3-3 3m-4-6l3 3-3 3"></path>
                        </svg>
                        Skip
                    </button>
                    <button id="next-btn" class="btn btn-secondary">
                        Next
                        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global state
        let csvData = null;
        let products = [];
        let currentProductIndex = 0;
        let decisions = {};
        let selectedCategories = {};
        let imagePreloadCache = {};

        // DOM elements
        const uploadSection = document.getElementById('upload-section');
        const loadingSection = document.getElementById('loading-section');
        const reviewSection = document.getElementById('review-section');
        const csvUpload = document.getElementById('csv-upload');
        const exportBtn = document.getElementById('export-btn');
        const productCard = document.getElementById('product-card');

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
        });

        function setupEventListeners() {
            csvUpload.addEventListener('change', handleFileUpload);
            exportBtn.addEventListener('click', exportDecisions);
            
            document.getElementById('prev-btn').addEventListener('click', prevProduct);
            document.getElementById('next-btn').addEventListener('click', nextProduct);
            document.getElementById('skip-btn').addEventListener('click', skipProduct);
            document.getElementById('approve-btn').addEventListener('click', () => handleDecision('approve'));
            document.getElementById('deny-btn').addEventListener('click', () => handleDecision('deny'));
        }

        async function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            showLoading();
            
            try {
                const text = await file.text();
                
                Papa.parse(text, {
                    header: true,
                    skipEmptyLines: true,
                    transformHeader: (header) => header.trim(),
                    transform: (value) => value.trim(),
                    complete: function(parsed) {
                        if (parsed.errors.length > 0) {
                            console.error('CSV parsing errors:', parsed.errors);
                        }
                        
                        processData(parsed.data);
                        hideLoading();
                        showReviewSection();
                    }
                });
                
            } catch (error) {
                console.error('Error parsing CSV:', error);
                alert('Error parsing CSV file. Please check the format.');
                hideLoading();
            }
        }

        function processData(data) {
            csvData = data;
            
            // Process each row as a product
            products = data.map((row, index) => {
                // Clean GPT categories by removing "Category: " prefix (in case any remain)
                const cleanGptCategory = (cat) => {
                    if (!cat) return '';
                    let cleaned = cat.replace(/^Category:\s*/i, '').trim();
                    // Handle "None of these" responses
                    if (cleaned.toLowerCase() === 'none of these') {
                        return 'None of these';
                    }
                    return cleaned;
                };

                return {
                    index: index,
                    handle: row['Product Handle'] || row.handle || '',
                    title: row['Title'] || row.title || '',
                    description: row['Desc'] || row.description || '',
                    imageUrl: row['ImageOG'] || row.image_url || '',
                    gpt1Category: cleanGptCategory(row['gpt1_category_desc'] || ''),
                    gpt2Category: cleanGptCategory(row['gpt2_category_desc'] || ''),
                    gptModelsAgree: row['gpt_models_agree'] || 'FALSE',
                    allModelsAgree: row['all_models_agree'] || 'FALSE',
                    faissCategory1: row['faiss_category_1'] || '',
                    faissConfidence1: parseFloat(row['faiss_confidence_1'] || '0'),
                    faissCategory2: row['faiss_category_2'] || '',
                    faissConfidence2: parseFloat(row['faiss_confidence_2'] || '0'),
                    faissCategory3: row['faiss_category_3'] || '',
                    faissConfidence3: parseFloat(row['faiss_confidence_3'] || '0'),
                    highConfidence: row['high_confidence'] || 'FALSE',
                    mediumConfidence: row['medium_confidence'] || 'FALSE',
                    lowConfidence: row['low_confidence'] || 'FALSE',
                    needsReview: row['needs_review'] || 'FALSE',
                    priorityReview: row['priority_review'] || 'FALSE',
                    manualCategory: row['manual_category'] || '',
                    reviewNotes: row['review_notes'] || '',
                    reviewStatus: row['review_status'] || '',
                    originalRow: row
                };
            });
            
            // Initialize tracking objects
            decisions = {};
            selectedCategories = {};
            
            console.log('Loaded', products.length, 'products');
            
            currentProductIndex = 0;
            updateDisplay();
            preloadNextImages();
        }

        function showLoading() {
            uploadSection.classList.add('hidden');
            loadingSection.classList.remove('hidden');
            reviewSection.classList.add('hidden');
        }

        function hideLoading() {
            loadingSection.classList.add('hidden');
        }

        function showReviewSection() {
            reviewSection.classList.remove('hidden');
        }

        function preloadNextImages() {
            for (let i = 1; i <= 3; i++) {
                const nextIndex = currentProductIndex + i;
                if (nextIndex < products.length) {
                    const nextProduct = products[nextIndex];
                    const imageUrl = nextProduct.imageUrl;
                    if (imageUrl && !imagePreloadCache[imageUrl]) {
                        const img = new Image();
                        img.onload = () => { imagePreloadCache[imageUrl] = true; };
                        img.src = imageUrl;
                    }
                }
            }
        }

        function loadProductImage(imageUrl) {
            const imageElement = document.getElementById('product-image');
            const placeholderElement = document.getElementById('image-placeholder');
            const statusElement = document.getElementById('image-status');
            const descriptionElement = document.getElementById('image-description');

            imageElement.classList.add('hidden');
            placeholderElement.classList.remove('hidden');

            if (!imageUrl) {
                statusElement.textContent = 'No Image Available';
                descriptionElement.textContent = 'This product does not have an associated image';
                return;
            }

            if (imagePreloadCache[imageUrl]) {
                imageElement.src = imageUrl;
                imageElement.classList.remove('hidden');
                placeholderElement.classList.add('hidden');
                return;
            }

            statusElement.textContent = 'Loading Image...';
            descriptionElement.textContent = 'Please wait while we load the product image';

            const testImage = new Image();
            
            testImage.onload = function() {
                imageElement.src = imageUrl;
                imageElement.classList.remove('hidden');
                placeholderElement.classList.add('hidden');
                imagePreloadCache[imageUrl] = true;
            };

            testImage.onerror = function() {
                statusElement.textContent = 'Image Load Failed';
                descriptionElement.textContent = 'Unable to load the product image';
            };

            testImage.src = imageUrl;
        }

        function updateDisplay() {
            if (products.length === 0) return;
            
            const currentProduct = products[currentProductIndex];
            
            document.getElementById('product-counter').textContent = 
                `Product ${currentProductIndex + 1} of ${products.length}`;
            
            document.getElementById('current-index').textContent = currentProductIndex + 1;
            document.getElementById('total-count').textContent = `of ${products.length}`;
            
            document.getElementById('prev-btn').disabled = currentProductIndex === 0;
            document.getElementById('next-btn').disabled = currentProductIndex === products.length - 1;
            document.getElementById('skip-btn').disabled = currentProductIndex === products.length - 1;
            
            document.getElementById('product-title').textContent = currentProduct.title;
            document.getElementById('product-description').textContent = currentProduct.description;
            
            loadProductImage(currentProduct.imageUrl);
            updateCategoriesDisplay(currentProduct);
            updateDecisionButtons();
            updateProgress();
            updateCardStyling();
            
            preloadNextImages();
        }

        function updateCategoriesDisplay(product) {
            const container = document.getElementById('categories-container');
            container.innerHTML = '';

            const categories = [];

            // Add GPT1 category if available and not "None of these"
            if (product.gpt1Category && product.gpt1Category !== 'None of these') {
                categories.push({
                    text: product.gpt1Category,
                    source: 'GPT-1',
                    confidence: null,
                    isCurrent: true,
                    id: 'gpt1'
                });
            }

            // Add GPT2 category if available, different from GPT1, and not "None of these"
            if (product.gpt2Category && 
                product.gpt2Category !== 'None of these' && 
                product.gpt2Category !== product.gpt1Category) {
                categories.push({
                    text: product.gpt2Category,
                    source: 'GPT-2',
                    confidence: null,
                    isCurrent: product.gpt1Category ? false : true,
                    id: 'gpt2'
                });
            }

            // Add FAISS categories (up to 3)
            if (product.faissCategory1) {
                categories.push({
                    text: product.faissCategory1,
                    source: 'FAISS',
                    confidence: product.faissConfidence1,
                    isCurrent: false,
                    id: 'faiss1'
                });
            }

            if (product.faissCategory2 && product.faissCategory2 !== product.faissCategory1) {
                categories.push({
                    text: product.faissCategory2,
                    source: 'FAISS',
                    confidence: product.faissConfidence2,
                    isCurrent: false,
                    id: 'faiss2'
                });
            }

            // Add third FAISS option if available
            if (product.faissCategory3 && 
                product.faissCategory3 !== product.faissCategory1 && 
                product.faissCategory3 !== product.faissCategory2) {
                categories.push({
                    text: product.faissCategory3,
                    source: 'FAISS',
                    confidence: product.faissConfidence3,
                    isCurrent: false,
                    id: 'faiss3'
                });
            }

            // Show "None of these" responses as special indicators
            if (product.gpt1Category === 'None of these' || product.gpt2Category === 'None of these') {
                const noneDiv = document.createElement('div');
                noneDiv.className = 'category-option';
                noneDiv.style.background = '#fef2f2';
                noneDiv.style.borderColor = '#fecaca';
                noneDiv.style.opacity = '0.7';
                noneDiv.innerHTML = `
                    <div class="category-text" style="font-style: italic; color: #991b1b;">
                        ${product.gpt1Category === 'None of these' ? 'GPT-1' : 'GPT-2'} responded: "None of these"
                    </div>
                    <div class="category-meta">
                        <span class="disagreement-badge">No Suggestion</span>
                    </div>
                `;
                container.appendChild(noneDiv);
            }

            if (categories.length === 0) {
                const noOptionsDiv = document.createElement('div');
                noOptionsDiv.className = 'category-option';
                noOptionsDiv.style.background = '#f9fafb';
                noOptionsDiv.style.borderColor = '#d1d5db';
                noOptionsDiv.style.opacity = '0.8';
                noOptionsDiv.innerHTML = `
                    <div class="category-text" style="font-style: italic; color: #6b7280;">
                        No valid category suggestions available
                    </div>
                    <div class="category-meta">
                        <span class="source-badge" style="background: #f3f4f6; color: #6b7280;">Manual Review Required</span>
                    </div>
                `;
                container.appendChild(noOptionsDiv);
                return;
            }

            // Get current selection
            const currentSelection = selectedCategories[product.handle] || 
                                  (categories.find(c => c.isCurrent)?.id);

            categories.forEach(category => {
                const div = document.createElement('div');
                div.className = 'category-option';
                div.dataset.categoryId = category.id;
                
                if (category.id === currentSelection) {
                    div.classList.add('selected');
                } else if (category.isCurrent && !selectedCategories[product.handle]) {
                    div.classList.add('current');
                }

                // Build category meta info with enhanced indicators
                let metaInfo = `<span class="source-badge">${category.source}</span>`;
                
                if (category.confidence !== null) {
                    const confPct = (category.confidence * 100).toFixed(1);
                    let confClass = 'confidence-badge';
                    if (category.confidence >= 0.85) confClass += ' high-conf';
                    else if (category.confidence >= 0.70) confClass += ' med-conf';
                    else confClass += ' low-conf';
                    metaInfo += `<span class="${confClass}">${confPct}%</span>`;
                }
                
                // Add agreement indicator for GPT models
                if (category.source.startsWith('GPT')) {
                    const agreementClass = product.gptModelsAgree === 'TRUE' ? 'agreement-badge' : 'disagreement-badge';
                    const agreementText = product.gptModelsAgree === 'TRUE' ? 'Models Agree' : 'Models Disagree';
                    metaInfo += `<span class="${agreementClass}">${agreementText}</span>`;
                }

                // Add confidence level indicators
                if (product.highConfidence === 'TRUE') {
                    metaInfo += `<span class="agreement-badge">High Confidence</span>`;
                } else if (product.lowConfidence === 'TRUE') {
                    metaInfo += `<span class="disagreement-badge">Low Confidence</span>`;
                }

                // Add priority indicators
                if (product.priorityReview === 'TRUE') {
                    metaInfo += `<span class="disagreement-badge">Priority Review</span>`;
                }

                div.innerHTML = `
                    <div class="category-text">${category.text}</div>
                    <div class="category-meta">
                        ${metaInfo}
                    </div>
                `;

                div.addEventListener('click', () => selectCategory(product.handle, category.id, div));
                container.appendChild(div);
            });
        }

        function selectCategory(productHandle, categoryId, element) {
            // Remove selected class from all options
            document.querySelectorAll('.category-option').forEach(opt => {
                opt.classList.remove('selected', 'current');
            });

            // Add selected class to clicked option
            element.classList.add('selected');

            // Store selection
            selectedCategories[productHandle] = categoryId;

            updateCardStyling();
            updateApproveButtonText();
        }

        function updateDecisionButtons() {
            const currentProduct = products[currentProductIndex];
            const currentDecision = decisions[currentProduct.handle];
            
            const approveBtn = document.getElementById('approve-btn');
            const denyBtn = document.getElementById('deny-btn');
            
            approveBtn.classList.toggle('active', currentDecision === 'approve');
            denyBtn.classList.toggle('active', currentDecision === 'deny');
        }

        function updateCardStyling() {
            if (products.length === 0 || currentProductIndex >= products.length) return;
            
            const currentProduct = products[currentProductIndex];
            if (!currentProduct || !productCard) return;
            
            const currentDecision = decisions[currentProduct.handle];
            const hasSelection = selectedCategories[currentProduct.handle];
            
            productCard.classList.remove('approved', 'denied', 'changed');
            
            if (hasSelection) {
                productCard.classList.add('changed');
            } else if (currentDecision === 'approve') {
                productCard.classList.add('approved');
            } else if (currentDecision === 'deny') {
                productCard.classList.add('denied');
            }
        }

        function updateApproveButtonText() {
            if (products.length === 0 || currentProductIndex >= products.length) return;
            
            const currentProduct = products[currentProductIndex];
            if (!currentProduct) return;
            
            const hasSelection = selectedCategories[currentProduct.handle];
            const approveText = document.getElementById('approve-text');
            
            if (approveText) {
                if (hasSelection) {
                    approveText.textContent = 'Approve Selected Category';
                } else {
                    approveText.textContent = 'Approve Current Category';
                }
            }
        }

        function updateProgress() {
            const reviewedCount = Object.keys(decisions).length;
            const totalCount = products.length;
            const percentage = Math.round((reviewedCount / totalCount) * 100);
            
            document.getElementById('progress-count').textContent = `${reviewedCount} of ${totalCount} reviewed`;
            document.getElementById('progress-fill').style.width = `${percentage}%`;
            document.getElementById('progress-percent').textContent = `${percentage}% complete`;
            
            if (reviewedCount > 0) {
                updateSummary();
                document.getElementById('summary-section').classList.remove('hidden');
            }
            
            if (reviewedCount > 0) {
                exportBtn.classList.remove('hidden');
                document.getElementById('export-count').textContent = reviewedCount;
            } else {
                exportBtn.classList.add('hidden');
            }
        }

        function updateSummary() {
            const approved = Object.values(decisions).filter(d => d === 'approve').length;
            const denied = Object.values(decisions).filter(d => d === 'deny').length;
            const pending = products.length - Object.keys(decisions).length;
            
            document.getElementById('approved-count').textContent = approved;
            document.getElementById('denied-count').textContent = denied;
            document.getElementById('pending-count').textContent = pending;
        }

        function handleDecision(decision) {
            const currentProduct = products[currentProductIndex];
            decisions[currentProduct.handle] = decision;
            
            updateDisplay();
            
            if (currentProductIndex < products.length - 1) {
                setTimeout(() => {
                    currentProductIndex++;
                    updateDisplay();
                }, 500);
            }
        }

        function prevProduct() {
            if (currentProductIndex > 0) {
                currentProductIndex--;
                updateDisplay();
            }
        }

        function nextProduct() {
            if (currentProductIndex < products.length - 1) {
                currentProductIndex++;
                updateDisplay();
            }
        }

        function skipProduct() {
            if (currentProductIndex < products.length - 1) {
                currentProductIndex++;
                updateDisplay();
            }
        }

        function getSelectedCategoryText(product, categoryId) {
            switch(categoryId) {
                case 'gpt1': return product.gpt1Category;
                case 'gpt2': return product.gpt2Category;
                case 'faiss1': return product.faissCategory1;
                case 'faiss2': return product.faissCategory2;
                case 'faiss3': return product.faissCategory3;
                default: return '';
            }
        }

        function exportDecisions() {
            // Get original headers and add new tracking columns if they don't exist
            const originalHeaders = Object.keys(csvData[0]);
            const trackingColumns = ['decision', 'selected_category_source', 'final_category', 'category_changed', 'reviewer_notes'];
            
            // Only add tracking columns if they don't already exist
            const newColumns = trackingColumns.filter(col => !originalHeaders.includes(col));
            const csvHeader = originalHeaders.concat(newColumns);
            
            const enhancedData = csvData.map((row, index) => {
                const product = products[index];
                const decision = decisions[product.handle] || row.decision || '';
                const selectedCategoryId = selectedCategories[product.handle];
                
                let finalCategory = '';
                let categorySource = '';
                let categoryChanged = 'false';
                let reviewerNotes = '';
                
                if (selectedCategoryId) {
                    finalCategory = getSelectedCategoryText(product, selectedCategoryId);
                    categorySource = selectedCategoryId.startsWith('faiss') ? 'FAISS' : selectedCategoryId.toUpperCase();
                    categoryChanged = 'true';
                    reviewerNotes = `Selected ${categorySource} option: ${finalCategory}`;
                } else {
                    // Use original/current category (GPT1 has priority)
                    if (product.gpt1Category) {
                        finalCategory = product.gpt1Category;
                        categorySource = 'GPT1';
                    } else if (product.gpt2Category) {
                        finalCategory = product.gpt2Category;
                        categorySource = 'GPT2';
                    }
                    reviewerNotes = `Kept original ${categorySource} category`;
                }
                
                // Create the row data starting with original values
                const rowData = [...Object.values(row)];
                
                // Update existing manual_category, review_notes, review_status if they exist
                if (originalHeaders.includes('manual_category')) {
                    rowData[originalHeaders.indexOf('manual_category')] = selectedCategoryId ? finalCategory : row.manual_category;
                }
                
                if (originalHeaders.includes('review_notes')) {
                    const existingNotes = row.review_notes || '';
                    const newNotes = existingNotes ? `${existingNotes}; ${reviewerNotes}` : reviewerNotes;
                    rowData[originalHeaders.indexOf('review_notes')] = newNotes;
                }
                
                if (originalHeaders.includes('review_status')) {
                    rowData[originalHeaders.indexOf('review_status')] = decision === 'approve' ? 'approved' : 
                                                                       decision === 'deny' ? 'rejected' : 
                                                                       row.review_status || 'pending';
                }
                
                // Add or update tracking columns
                if (originalHeaders.includes('decision')) {
                    rowData[originalHeaders.indexOf('decision')] = decision;
                } else if (newColumns.includes('decision')) {
                    rowData.push(decision);
                }
                
                if (originalHeaders.includes('selected_category_source')) {
                    rowData[originalHeaders.indexOf('selected_category_source')] = categorySource;
                } else if (newColumns.includes('selected_category_source')) {
                    rowData.push(categorySource);
                }
                
                if (originalHeaders.includes('final_category')) {
                    rowData[originalHeaders.indexOf('final_category')] = finalCategory;
                } else if (newColumns.includes('final_category')) {
                    rowData.push(finalCategory);
                }
                
                if (originalHeaders.includes('category_changed')) {
                    rowData[originalHeaders.indexOf('category_changed')] = categoryChanged;
                } else if (newColumns.includes('category_changed')) {
                    rowData.push(categoryChanged);
                }
                
                if (originalHeaders.includes('reviewer_notes')) {
                    rowData[originalHeaders.indexOf('reviewer_notes')] = reviewerNotes;
                } else if (newColumns.includes('reviewer_notes')) {
                    rowData.push(reviewerNotes);
                }
                
                return rowData;
            });
            
            // Escape CSV values properly
            const escapeValue = (value) => {
                if (value === null || value === undefined) return '';
                const str = String(value);
                if (str.includes('"') || str.includes(',') || str.includes('\n') || str.includes('\r')) {
                    return `"${str.replace(/"/g, '""')}"`;
                }
                return str;
            };
            
            const csvContent = [
                csvHeader.map(escapeValue).join(','),
                ...enhancedData.map(row => row.map(escapeValue).join(','))
            ].join('\n');
            
            try {
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                
                if (navigator.msSaveBlob) {
                    navigator.msSaveBlob(blob, 'product_categories_reviewed.csv');
                } else {
                    const url = URL.createObjectURL(blob);
                    link.href = url;
                    link.download = 'product_categories_reviewed.csv';
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                }
                
                const reviewedCount = Object.keys(decisions).length;
                const changedCount = Object.keys(selectedCategories).length;
                
                alert(`Export successful!\n\nRows exported: ${enhancedData.length}\nReviewed products: ${reviewedCount}\nCategories changed: ${changedCount}`);
                
            } catch (error) {
                console.error('Export failed:', error);
                
                navigator.clipboard.writeText(csvContent).then(() => {
                    alert('Export failed, but CSV data has been copied to your clipboard!');
                }).catch(() => {
                    alert('Export failed. Please check browser console.');
                });
            }
        }
    </script>
</body>
</html>
